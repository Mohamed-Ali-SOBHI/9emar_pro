#!/usr/bin/env python3
"""
Module de pr√©diction pour les matchs de football
Utilise le mod√®le trained pour faire des pr√©dictions sur les matchs fournis
"""

import pandas as pd
import numpy as np
from pathlib import Path
import json
import joblib
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

def check_model_exists():
    """V√©rifie si le mod√®le trained existe"""
    model_dir = Path("models/optimal_model")
    required_files = [
        "trained_model_realistic.pkl",
        "scaler_realistic.pkl", 
        "features_realistic.json"
    ]
    
    if not model_dir.exists():
        return False
    
    for file in required_files:
        if not (model_dir / file).exists():
            return False
    
    return True

def run_predictions(df_for_prediction):
    """
    Fait les pr√©dictions pour les matchs fournis
    
    Args:
        df_for_prediction (DataFrame): Donn√©es des matchs avec toutes les features n√©cessaires
        
    Returns:
        tuple: (success: bool, results: list)
    """
    try:
        # V√©rifier si le mod√®le existe
        if not check_model_exists():
            print("[ERROR] Mod√®le trained non trouv√©!")
            print("[INFO] Ex√©cutez d'abord: python utils/train/realistic_training.py")
            return False, []
        
        # Charger le mod√®le et faire les pr√©dictions
        model_dir = Path("models/optimal_model")
        
        # Charger le mod√®le, scaler et features
        model = joblib.load(model_dir / "trained_model_realistic.pkl")
        scaler = joblib.load(model_dir / "scaler_realistic.pkl")
        
        with open(model_dir / "features_realistic.json", 'r') as f:
            model_features = json.load(f)
        
        print(f"[INFO] Mod√®le charg√© avec {len(model_features)} features")
        
        # V√©rifier que toutes les features requises sont pr√©sentes
        missing_features = [f for f in model_features if f not in df_for_prediction.columns]
        if missing_features:
            print(f"[ERROR] Features requises manquantes: {missing_features}")
            print(f"[INFO] Impossible de faire des pr√©dictions sans toutes les features n√©cessaires")
            return False, []
        
        # S√©lectionner seulement les features du mod√®le
        X = df_for_prediction[model_features].fillna(0)
        
        # Scaler les donn√©es
        X_scaled = scaler.transform(X)
        
        print(f"[DEBUG] Shape des donn√©es pour pr√©diction: {X_scaled.shape}")
        print(f"[DEBUG] Types des donn√©es: {X.dtypes.value_counts()}")
        
        # Faire les pr√©dictions
        predictions = model.predict(X_scaled)
        probabilities = model.predict_proba(X_scaled)
        
        # Pr√©parer les r√©sultats
        results = []
        for i, (_, match) in enumerate(df_for_prediction.iterrows()):
            pred_label = predictions[i]
            pred_probs = probabilities[i]
            
            # Correspondance des classes
            class_names = ['Loss', 'Draw', 'Win']  # Bas√© sur l'ordre habituel du mod√®le
            
            result = {
                'league': match['league'],
                'home_team': match['team_name'],
                'away_team': match['opponent_name'],
                'prediction': pred_label,
                'prediction_label': class_names[pred_label] if pred_label < len(class_names) else f"Class_{pred_label}",
                'prob_loss': pred_probs[0] if len(pred_probs) > 0 else 0,
                'prob_draw': pred_probs[1] if len(pred_probs) > 1 else 0,
                'prob_win': pred_probs[2] if len(pred_probs) > 2 else 0,
                'confidence': max(pred_probs),
                'odds_home': match.get('B365H'),
                'odds_draw': match.get('B365D'),
                'odds_away': match.get('B365A')
            }
            results.append(result)
        
        return True, results
        
    except Exception as e:
        print(f"[ERROR] Predictions failed: {e}")
        import traceback
        traceback.print_exc()
        return False, []

def display_and_save_predictions(results):
    """
    Affiche et sauvegarde les r√©sultats de pr√©diction
    
    Args:
        results (list): Liste des r√©sultats de pr√©diction
        
    Returns:
        str: Chemin du fichier sauvegard√©
    """
    if not results:
        print("[INFO] Aucun r√©sultat √† afficher")
        return None
    
    # Afficher les r√©sultats
    print("\n" + "="*80)
    print("PREDICTIONS DU JOUR".center(80))
    print("="*80)
    
    for result in results:
        print(f"\nüèÜ {result['league']}: {result['home_team']} vs {result['away_team']}")
        print(f"   Pr√©diction: {result['prediction_label']} ({result['confidence']:.1%} confiance)")
        print(f"   Probabilit√©s: Win {result['prob_win']:.1%} | Draw {result['prob_draw']:.1%} | Loss {result['prob_loss']:.1%}")
        if result['odds_home']:
            print(f"   Cotes: Home {result['odds_home']:.2f} | Draw {result['odds_draw']:.2f} | Away {result['odds_away']:.2f}")
    
    # Sauvegarder les r√©sultats
    results_df = pd.DataFrame(results)
    output_dir = Path("Match of ze day")
    output_dir.mkdir(exist_ok=True)
    
    today_str = datetime.now().strftime('%Y%m%d')
    output_file = output_dir / f"predictions_{today_str}.csv"
    results_df.to_csv(output_file, index=False)
    
    print(f"\n[SUCCESS] Pr√©dictions sauvegard√©es: {output_file}")
    return str(output_file)

def predict_matches(df_for_prediction):
    """
    Interface principale pour faire des pr√©dictions
    
    Args:
        df_for_prediction (DataFrame): Donn√©es des matchs √† pr√©dire
        
    Returns:
        bool: Succ√®s de l'op√©ration
    """
    print(f"\n{'-'*50}")
    print(f"PREDICTIONS AVEC LE MODELE")
    print(f"{'-'*50}")
    
    if df_for_prediction is None or df_for_prediction.empty:
        print("[ERROR] Aucune donn√©e fournie pour les pr√©dictions")
        return False
    
    # Faire les pr√©dictions
    success, results = run_predictions(df_for_prediction)
    
    if not success or not results:
        print("[ERROR] √âchec des pr√©dictions")
        return False
    
    # Afficher et sauvegarder
    output_file = display_and_save_predictions(results)
    
    return output_file is not None

if __name__ == "__main__":
    print("Ce module est destin√© √† √™tre import√©, pas ex√©cut√© directement")
    print("Utilisez prediction_complete_pipeline.py pour lancer le pipeline complet")